name: CMake on multiple platforms

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest]
        build_type: [Release]
        # c_compiler: [gcc, clang, cl]
        c_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        #  - os: ubuntu-latest
        #    c_compiler: gcc
        #    cpp_compiler: g++
        #  - os: ubuntu-latest
        #    c_compiler: clang
        #    cpp_compiler: clang++
        #  - os: macos-latest
        #    c_compiler: clang
        #    cpp_compiler: clang++
        #exclude:
        #  - os: windows-latest
        #    c_compiler: gcc
        #  - os: windows-latest
        #    c_compiler: clang
        #  - os: ubuntu-latest
        #    c_compiler: cl
        #  - os: macos-latest
        #    c_compiler: cl
        #  - os: macos-latest
        #    c_compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # - name: Cache vcpkg dependencies
    #   id: vcpkg-cache
    #   uses: actions/cache@v2
    #   with:
    #     path: |
    #       vcpkg/downloads
    #       vcpkg/packages
    #     key: ${{ runner.os }}-${{ matrix.c_compiler }}-${{ hashFiles('**/vcpkg.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-${{ matrix.c_compiler }}-
    #       ${{ runner.os }}-
    #       ${{ runner.os }}

    - name: Init vcpkg submodule
      run: |
        git submodule update --init --recursive
        cd vcpkg
        ./bootstrap-vcpkg.bat
        cd ..

    - name: Install vcpkg on Linux and MacOS
      if: matrix.os != 'windows-latest'
      run: |
        git submodule update --init --recursive
        cd vcpkg
        ./bootstrap-vcpkg.sh
        cd ..

    - name: Install GLFW dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
